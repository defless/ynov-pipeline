name: Python application

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  lint:
    # Remember to always add a custom timeout
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Lint with flake8
      run: |
        flake8 controllers.py
        flake8 routes.py
  tests:
    if: "!contains(github.event.head_commit.message, 'hotfix')"
    timeout-minutes: 5
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage-badge
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Test with pytest
      run: |
        pytest --doctest-modules controllers.py --cov=.  --cov-report=html
    - name: Generate a badge
      run: |
        coverage-badge -o htmlcov/iconCoverage.svg
    # Upload coverage results as artifacts
    - name: Archive code coverage results
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: ./htmlcov
        retention-days: 5

  deploy:
    if: "!contains(github.event.head_commit.message, 'hotfix')"
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: code-coverage-report
          path: './htmlcov'
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './htmlcov'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
        
  deploy-hotfix:
    if: "contains(github.event.head_commit.message, 'hotfix')"
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1


  isAlive:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    # Will run even if deploy fails 
    if: ${{ always() }}
    needs: [deploy]
    steps:
      - uses: actions/checkout@v3
      - name: Check is on
        run: |
          HTTP=$(curl -s -o /dev/null -w "%{http_code}" https://defless.github.io/ynov-pipeline/)
          if [ $HTTP == 200 ]
          then
            echo "OK" 
          else 
            echo "not OK"
          fi
      - name: warn
        run:
          echo 'Pipeline ended'
      
      
        
